<!DOCTYPE html>
<html>
  <head>
    <title>Siyavula API - Assignment Activity</title>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <link rel="stylesheet" href="https://www.siyavula.com/static/themes/emas/siyavula-api/siyavula-api.min.css"/>
    <link rel="stylesheet" href="static/css/styles.css"/>
  </head>
  <body>
    <main class="sv">

      <div class="activity" id="assignment">
        <div class="activity-header">
          <h1>Assignment</h1>
          <div class="activity-badges">
            <div class="activity-badge"></div>
          </div>
        </div>

        <div class="question-content"></div>
      </div>
    </main>

    <script src="{{ api_base_url }}static/themes/emas/node_modules/mathjax/MathJax.js?config=TeX-MML-AM_HTMLorMML-full"></script>
    <script src="{{ api_base_url }}static/themes/emas/siyavula-api/js/v2/siyavula-api.js"></script>
    <script>
      const manager = new Siyavula.SiyavulaActivityManager();
      const config = {
        baseUrl: "{{ api_base_url }}",
        token: "{{ token }}",
        userToken: "{{ user_token }}",
        showLivePreview: true,
      };

      async function initializeActivities() {
        try {
          const assignment = await manager.createActivity(
            "#assignment",
            config,
            "assignment",
            {
              assignmentId: {{ assignment_id }},
            }
          );

          assignment.renderer.on("activityProgressUpdate", (data) => {
            const badge =
              assignment.renderer.container.querySelector(".activity-badge");
            if (badge) {
              badge.textContent = `${data.current_index + 1}/${data.question_count}`;
            }
          });
          assignment.renderer.emit(
            "activityProgressUpdate",
            assignment.currentActivity.progress
          );

          assignment.renderer.on("assignmentComplete", (data) => {
            const svContainer = assignment.renderer.container.querySelector(".sv");
            const percentageCount = (data.correct_count / data.question_count) * 100;
            let feedback = "";
            let finalFeedback = "";

            if (percentageCount === 0) {
              feedback = "Great effort! You've completed the assignment.";
              finalFeedback =
                "You didn't get any questions correct this time. Try it again to improve!";
            } else if (percentageCount < 50) {
              feedback = "Great effort! You've completed the assignment.";
              finalFeedback = `Your overall result is ${percentageCount}%.`;
            } else if (percentageCount < 70) {
              feedback = "Well done! You've completed the assignment.";
              finalFeedback = `Your overall result is ${percentageCount}%.`;
            } else if (percentageCount < 100) {
              feedback = "Excellent! You've completed the assignment.";
              finalFeedback = `Your overall result is ${percentageCount}%.`;
            } else {
              feedback = "Awesome! You've completed the assignment.";
              finalFeedback = "You answered every question correctly and got 100%!";
            }

            const completionHtml = `
                      <div class="assignment-completion-message">
                        <div class="assignment-completion-message-figure">
                          <img class="icon" src="static/img/assignment-completed.svg" aria-hidden="true">
                        </div>
                        <div class="assignment-completion-message-title">${feedback}</div>
                        <div class="assignment-completion-message-description">${finalFeedback}</div>
                      </div>
                    `;

            if (svContainer) {
              svContainer.insertAdjacentHTML("beforeend", completionHtml);
              assignment.renderer.container.querySelector(
                ".sv-form__actions"
              ).style.display = "none";
            }
          });
        } catch (error) {
          console.error("Failed to initialize activities:", error);
        }
      }

      document.addEventListener("DOMContentLoaded", () => {
        initializeActivities();
      });
    </script>
  </body>
</html>
